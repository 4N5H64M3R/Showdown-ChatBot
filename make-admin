#!/bin/env node

'use strict';

const Util = require('util');
const Path = require('path');
const FileSystem = require('fs');
const ToolsManager = require(Path.resolve(__dirname, 'src/tools.js'));

global.Package = require('./package.json');

console.log(Util.format('Showdown-ChatBot %s', Package.version);

require('./src/dependencies.js');

try {
	require('readline-sync');
} catch (e) {
	console.log('Installing dependencies... (readline-sync)');
	require('child_process').spawnSync('sh', ['-c', 'npm install readline-sync'], {stdio: 'inherit'});
}

global.Tools = new ToolsManager(Path.resolve(__dirname, 'src/tools/'));

const ReadLineSync = require('readline-sync');
const CryptoDataBase = Tools.get('crypto-json.js');
const Text = Tools.get('text.js');

let passfile = Path.resolve(__dirname, 'config/users.key');

if (!FileSystem.existsSync(passfile)) {
	FileSystem.writeFileSync(passfile, Text.randomToken(20));
}

let db = new CryptoDataBase(Path.resolve(__dirname, 'config/users.crypto'), FileSystem.readFileSync(passfile).toString());

console.log("\nPlease type the credentials for the new administrator account.");

let user, pass;

do {
	user = Text.toId(ReadLineSync.question('User: '));
	if (!user)
		continue;
	if (db.data[user]) {
		console.log('The user already exists');
		continue;
	}
	pass = Text.toId(ReadLineSync.questionNewPassword('Password: ', {min: 8, max: 30}));
} while (db.data[user]);

db.data[user] = {
	id: user,
	password: pass,
	name: user,
	group: 'Administrator',
	permissions: {root: true}
};

db.on('write', () => {
	console.log('User ' + user + ' was created as an administrtor account.');
});

db.write();
